'''

from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from models import User
from crud import get_db

# üîê Chave secreta usada para assinar e verificar os tokens JWT
SECRET_KEY = "sua_chave_secreta"
# üîê Algoritmo de assinatura usado para gerar o JWT (HMAC com SHA-256)
ALGORITHM = "HS256"
# ‚è±Ô∏è Tempo de expira√ß√£o do token de acesso (em minutos)
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# üîí Configura√ß√£o do contexto de criptografia de senhas usando bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
# üõ°Ô∏è Define o esquema de autentica√ß√£o OAuth2 para extrair o token JWT do header Authorization
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")
####################################################
###################################################

# üîç Verifica se a senha digitada corresponde ao hash armazenado
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

# üîê Gera um hash seguro da senha para armazenar no banco de dados
def get_password_hash(password):
    return pwd_context.hash(password)

# üîé Autentica o usu√°rio verificando se o nome de usu√°rio existe e se a senha est√° correta
def authenticate_user(db: Session, username: str, password: str):
    # Busca o usu√°rio no banco de dados pelo nome de usu√°rio
    user = db.query(User).filter(User.username == username).first()
    # Se o usu√°rio n√£o existir ou a senha estiver incorreta, retorna None
    if not user or not verify_password(password, user.password):
        return None
    # Se tudo estiver certo, retorna o objeto do usu√°rio
    return user

# üß™ Cria um token JWT com os dados fornecidos e tempo de expira√ß√£o
def create_access_token(data: dict, expires_delta: timedelta = None):
    # Copia os dados para evitar modificar o original
    to_encode = data.copy()
    # Define o tempo de expira√ß√£o do token
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    # Adiciona a expira√ß√£o ao payload do token
    to_encode.update({"exp": expire})
    # Gera e retorna o token JWT assinado com a chave secreta e algoritmo definido
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# üîê Recupera o usu√°rio atual a partir do token JWT enviado na requisi√ß√£o
def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    # Define uma exce√ß√£o padr√£o para falhas de autentica√ß√£o
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Token inv√°lido",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        # Decodifica o token JWT usando a chave secreta e algoritmo
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        # Extrai o nome de usu√°rio do payload (campo "sub")
        username = payload.get("sub")
        # Se n√£o houver nome de usu√°rio, lan√ßa exce√ß√£o
        if username is None:
            raise credentials_exception
    except JWTError:
        # Se houver erro na decodifica√ß√£o do token, lan√ßa exce√ß√£o
        raise credentials_exception
    # Busca o usu√°rio no banco de dados
    user = db.query(User).filter(User.username == username).first()
    # Se o usu√°rio n√£o existir, lan√ßa exce√ß√£o
    if user is None:
        raise credentials_exception
    # Retorna o usu√°rio autenticado
    return user



SECRET_KEY = 'minha_senha_secreta'

ALGORITHM = 'HS256'

ACCESS_TOKEN_EXPIRE_MINUTES = 90

pwd_context =

def verify_password(plain_password,hash_password):
    return pwd_context.verify(plain_password,hash_password)

def get_verify_password(password):
    return pwd_context.hash(password)

def autenticate_user(db: Session,username: str,password: str):
    info = db.query(User).filter(User.username == username).first()
    if not info or verifyy_password(password,info.password)
        return None
    return info

'''